01..
  class Solution {
public:
    int maxHeightOfTriangle(int red, int blue) {
        int c1=0, c2=0, ht=0;
        for(int i=1;i<=100;i++){
            if(i%2) c1+=i;
            else c2+=i;
            if(max(c1,c2)<=max(blue,red) && min(c1,c2)<=min(blue,red)){
                ht=i;
            }
            else break;
        }
        return ht;
    }
};

02..
  class Solution {
public:
    int maximumLength(vector<int>& nums) {
        int co=0;
        int ce=0;
        int c=0;
        int f=-1;
        for(auto i:nums)
        {
            if(i%2)
            {
                co++;
                if(f!=1)
                {
                    c++;
                    f=1;
                }
            }
            else
            {
                ce++;
                if(f!=0)
                {
                    c++;
                    f=0;
                }
            }
        }
        return max(ce,max(co,c));
    }
};

03..
  class Solution {
public:
    int maximumLength(vector<int>& nums, int k) {
        for(auto &i:nums) i%=k;
        int n=nums.size();
        vector<vector<int>> dp(n, vector<int>(k, 0));
        vector<int> last(k,-1);

        int ans=1;
        for(int i=0;i<n;i++){
            for(int j=0;j<k;j++){
                if(last[j]==-1) dp[i][j] = 1;
                else dp[i][j] = dp[ last[j] ][ nums[i] ] + 1;
                ans=max(ans, dp[i][j]);
            }
            last[nums[i]] = i;
        }
        return ans;
    }
};
04...
  
