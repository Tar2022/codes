class Solution {
public:
    double minimumAverage(vector<int>& nums) {
        int n = nums.size();
        double min_in_avg = INT_MAX;
        sort(nums.begin(),nums.end()); //O(nlogn)
        for(int i=0;i<n/2;i++) //O(n)
        {
            double avg = ((nums[i]+nums[n-i-1])*1.0/2.0);
            min_in_avg=min(min_in_avg,avg);
        }
        return min_in_avg;
    }
    // tc - O(nlogn)
    // sc - O(1)
};


02

class Solution {
public:
    int minimumArea(vector<vector<int>>& grid) {
        int top = -1;
        int bottom = -1;
        int left = -1;
        int right = -1;
        
        int n = grid.size();
        int m = grid[0].size();
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==1)
                {
                    if(top==-1) top=i;
                    bottom=i;
                }
            }
        } // n*m
        
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[j][i]==1)
                {
                    if(left==-1) left=i;
                    right=i;
                }
            }
        } //n*m
        
        int area = (right-left+1)*(bottom-top+1);
        return area;
    }
    // tc - O(n*m)
    // sc - O(1)
};


03..

class Solution {
public:
    long long maximumTotalCost(vector<int>& nums) {
        
        int n=nums.size();
        vector<int>dp(n+1,0);
        dp[1]=nums[0];
        for(int i=1;i<n;i++)
        {
            long long op1=dp[i]+nums[i];
            long long op2=dp[i-1]+nums[i-1]+(-1*nums[i]);
            dp[i+1]=max(op1,op2);
        }
        return dp[n];
    }
};
